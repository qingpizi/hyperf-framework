<?php

declare(strict_types=1);

namespace App\Logic\%GROUP_NAME%;

use App\Constants\Code;
use App\Exception\AdminException;
use App\Model\%GROUP_NAME%;
use Qingpizi\HyperfFramework\Logic\BaseLogic;

class IndexLogic extends BaseLogic
{
    public function handle(array $validated): array
    {
        $query = %GROUP_NAME%::query();
        $query = $this->getWheres($query, $validated);
        $paginate = $this->getOrderBys($query, $validated)->paginate($this->getPageSize($validated));
        if ($paginate->isEmpty()) {
            throw new AdminException(Code::RESOURCES_NOT_EXIST);
        }
        return [
            'items' => $paginate->items(),
            'page_info' => [
                'per_page' => $paginate->perPage(),
                'current_page' => $paginate->currentPage(),
                'total' => $paginate->total(),
                'last_page' => $paginate->lastPage(),
            ],
        ];
    }

    private function getWheres(Builder $query, array $validated): Builder
    {
        return $query;
    }

    private function getOrderBys(Builder $query, array $validated): Builder
    {
        if (! isset($validated['sort_name']) || empty($validated['sort_name'])) {
            $validated['sort_name'] = $this->container->get(%GROUP_NAME%::class)->getKeyName();
        }
        $validated['sort_value'] = isset($validated['sort_value']) ? ($validated['sort_value'] == 'asc' ? 'asc' : 'desc') : 'desc';
        return $query->orderBy($validated['sort_name'], $validated['sort_value']);
    }

    private function getPageSize(array $validated): int
    {
        return isset($validated['page_size']) ? (int) $validated['page_size'] : self::DEFAULT_PER_PAGE;
    }
}
